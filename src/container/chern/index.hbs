{{!
Це код container файлу для index сторінки,
в якому міститься код, котрий буде віддаватися по шляху (PATH) - "/"
}}


{{!-- <main>
  <section>
    <h1>Редактирование товара</h1>
    <div class="form">
      <h2 class="form__title">Информация про товар</h2>
      <form method="POST" action="/product-update">
        <div class="form__content">
          <div class="form__field-sum">
            <div class="label">
              <label for="name" class="form__label">Название товара</label>
              <input type="text" name="name" class="form__input">
            </div>
            <div class="label">
              <label for="price" class="form__label">Цена</label>
              <input type="text" name="price" class="form__input">
            </div>
            <div class="label">
              <label for="description" class="form__label">ID</label>
              <input type="text" name="description" class="form__input">
            </div>
          </div>
          <div class="form__field">
            <label for="id" class="form__label">Описание товара</label>
            <input type="" name="id" class="form__input-pas">
            <h5>Отображается в карточке товара</h5>
          </div>

          <div class="button">
            {{!-- <button class="form__button btn btn-primary">Сохранить обновления</button>
            <button class="form__button btn btn-danger">Удалить товар</button> --}}
            <a href=""><button class="form__button btn btn-primary">Сохранить обновления</button></a>
            <a href="/product-delete?id={{id}}"><button class="form__button btn btn-danger">Удалить товар</button></a>
          </div>
        </div>
      </form>
    </div>
  </section>



</main> --}}

{{!-- <section>
  <div class="container">
    <h2 class="title"> Iнформацiя про товар </h2>
    <form action="/product-update" method="post">
      <div class="form__container">
        <div class="input__wrapper">
          <label for="name" class="form__label"> Назва товару </label>
          <input type="text" name="name" class="form__input">
        </div>

        <div class="input__wrapper">
          <label for="price" class="form__label"> Ціна </label>
          <input type="text" name="price" class="form__input">
        </div>

        <div class="wrapper">
          <label for="id" class="form__label"> ID </label>
          <input type="text" name="id" class="form__input">
        </div>
      </div>

      <div class="wrapper">
        <label for="description" class="form__label"> Короткий опис товару </label>
        <input type="textarea" name="description" class="form__input">
      </div>

      <div class="link__wrapper">
        <button class="form__button btn btn-primary">Зберегти оновлення</button>
        <a href="/product-delete?id={{id}}" class="form__button red">Видалити товар</a>
      </div>
    </form>
  </div>
</section> --}}

{{!-- <div class="btn__wrapper">
  <a class="back" href="/product-create"><button class="btn btn-danger">
      <<< </button></a>
</div> --}}

{{!-- // class Product {
// static #list = []

// constructor(name, price, description) {
// this.name = name
// this.price = price
// this.description = description
// this.id = Math.floor(Math.random() * 100000)
// this.createDate = () => {
// this.date = new Date().toISOString()
// }
// }

// static getList() {
// return this.#list
// }

// checkId = (id) => this.id === id

// static add = (product) => {
// this.#list.push(product)
// }

// static getById = (id) => {
// this.#list.find((product) => product.id === id)
// }

// // static changeById(id) => {
// // const product = this.getById(id);
// // }
// }
// //===========================================================================

// router.post('/product-create', function (req, res) {
// const list = Product.getList()
// const { name, price, description } = req.body
// const product = new Product(name, price, description)

// Product.add(product)

// // const list = Product.getList()
// // console.log(`create ${list}`)

// res.render('product-create', {
// style: 'product-create',
// info: 'Товар успішно додано',
// data: {
// list,
// isEmpty: list.length === 0,
// },
// })
// })

// // ================================================================

// router.get('/product-create', function (req, res) {
// console.log('get', Product.getList())
// res.render('product-list', {
// style: 'product-create',
// })
// })

// // ================================================================
// // ================================================================

// router.post('/alert-create-success', function (req, res) {
// res.render('alert-create-success', {
// style: 'alert-create-success',
// info: 'Товар успішно додано',
// })
// })

// // ================================================================

// router.get('/alert-create-success', function (req, res) {
// res.render('product-alert-success', {
// style: 'product-alert-success',
// info: 'Товар успішно додано',
// })
// })
// //=========================================================================
// //===========================================================================

// router.get('/product-list', function (req, res) {
// const list = Product.getList()

// res.render('product-list', {
// style: 'product-list',
// // data: {},
// })
// })

// // ================================================================
// router.post('/product-list', function (req, res) {
// const list = Product.getList()

// res.render('alert-delete-success', {
// style: 'alert-delete-success',
// info: 'Товар успішно видалений',
// data: {
// list,
// isEmpty: list.length === 0,
// },
// })
// })

// // ================================================================
// // ================================================================

// router.post('/product-update', function (req, res) {
// const { name, price, description } = req.body
// const product = new Product(name, price, description)

// Product.add(product)

// const { id } = req.query
// const list = Product.getList()
// console.log(`create ${list}`)

// res.render('product-list', {
// style: 'product-update',
// info: 'Товар успішно оновлений',
// data: {
// list,
// isEmpty: list.length === 0,
// },
// })
// })

// // ================================================================

// router.get('/product-update', function (req, res) {
// console.log('get', Product.getList())
// res.render('product-update', {
// style: 'product-update',
// })
// })

// // ================================================================
// // ================================================================
// //555555555555555555555555555555555555555555555555555555555

// router.post('/alert-delete-success', function (req, res) {
// res.render('alert-delete-success', {
// style: 'alert-delete-success',
// info: 'Товар успішно додано',
// })
// })

// // ================================================================
// router.post('/product-alert-success', function (req, res) {
// res.render('product-alert-success', {
// style: 'product-alert-success',
// info: 'Товар успішно додано',
// })
// })

// // ================================================================

// router.get('/product-alert-success', function (req, res) {
// res.render('product-alert-success', {
// style: 'product-alert-success',
// info: 'Товар успішно додано',
// })
// })
//******************************************************************************8 */
//=========================================================================

// // router.get Створює нам один ентпоїнт

// // ↙️ тут вводимо шлях (PATH) до сторінки
// router.get('/product-list', function (req, res) {
// // res.render генерує нам HTML сторінку

// const list = User.getList()

// // ↙️ cюди вводимо назву файлу з сontainer
// res.render('product-list', {
// // вказуємо назву папки контейнера, в якій знаходяться наші стилі
// style: 'product-list',

// data: {
// users: {
// list,
// isEmpty: list.length === 0,
// },
// },
// })
// // ↑↑ сюди вводимо JSON дані
// })

// //==================================================================

// // router.get Створює нам один ентпоїнт

// // ↙️ тут вводимо шлях (PATH) до сторінки
// router.get('/product-edit', function (req, res) {
// // res.render генерує нам HTML сторінку

// const list = User.getList()

// // ↙️ cюди вводимо назву файлу з сontainer
// res.render('product-edit', {
// // вказуємо назву папки контейнера, в якій знаходяться наші стилі
// style: 'product-edit',

// data: {
// users: {
// list,
// isEmpty: list.length === 0,
// },
// },
// })
// // ↑↑ сюди вводимо JSON дані
// }) --}}

{{!-- //$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

//==================================================================

// // router.get Створює нам один ентпоїнт

// // ↙️ тут вводимо шлях (PATH) до сторінки
// router.get('/product-create', function (req, res) {
// // res.render генерує нам HTML сторінку

// const list = User.getList()

// // ↙️ cюди вводимо назву файлу з сontainer
// res.render('product-create', {
// // вказуємо назву папки контейнера, в якій знаходяться наші стилі
// style: 'product-create',

// data: {
// users: {
// list,
// isEmpty: list.length === 0,
// },
// },
// })
// // ↑↑ сюди вводимо JSON дані
// })

// ================================================================ --}}
{{!-- //&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&& --}}

{{!-- //$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ --}}

{{!-- // ================================================================

//отримання даних з сервера та робота з ними

class Product {
static #list = []
static #count = 0

constructor(
img,
title,
description,
category,
price,
amount = 0,
) {
this.id = ++Product.#count
this.img = img
this.title = title
this.description = description
this.category = category
this.price = price
this.amount = amount
}

static add = (...data) => {
const newProduct = new Product(...data)

this.#list.push(newProduct)
}

static getList = () => {
return this.#list
}

static getById = (id) => {
return this.#list.find((product) => product.id === id)
}

static getRandomList = (id) => {
const filteredList = this.#list.filter(
(product) => product.id !== id,
)

const shuffledList = filteredList.sort(
() => Math.random() - 0.5,
)

return shuffledList.slice(0, 3)
}
}

Product.add(
'https://picsum.photos/200/300',
"Комп'ютер Artline Gaming (X43v31) AMD Ryzen 5 3600/",
'AMD Ryzen 5 3600 (3.6 - 4.2 ГГц) / RAM 16 ГБ / HDD 1 ТБ + SSD 480 ГБ / nVidia GeForce RTX 3050, 8 ГБ / без ОД / LAN /
без ОС',
[
{ id: 1, text: 'Готовий до відправки' },
{ id: 2, text: 'Топ продажів' },
],
27000,
10,
)

Product.add(
'https://picsum.photos/200/300',
"Комп'ютер COBRA Advanced (I11F.8.H1S2.15T.13356) Intel",
'Intel Core i3-10100F (3.6 - 4.3 ГГц) / RAM 8 ГБ / HDD 1 ТБ + SSD 240 ГБ / GeForce GTX 1050 Ti, 4 ГБ / без ОД / LAN /
Linux',
[{ id: 2, text: 'Топ продажів' }],
20000,
10,
)

Product.add(
'https://picsum.photos/200/300',
"Комп'ютер ARTLINE Gaming by ASUS TUF v119 (TUFv119)",
'Intel Core i9-13900KF (3.0 - 5.8 ГГц) / RAM 64 ГБ / SSD 2 ТБ (2 x 1 ТБ) / nVidia GeForce RTX 4070 Ti, 12 ГБ / без ОД /
LAN / Wi-Fi / Bluetooth / без ОС',
[{ id: 1, text: 'Готовий до відправки' }],
40000,
10,
)

class Purchase {
static DELIVERY_PRICE = 150
static #BONUS_FACTOR = 0.1

static #count = 0
static #list = []

static #bonusAccount = new Map()

static getBonusBalance = (email) => {
return Purchase.#bonusAccount.get(email) || 0
}

static calcBonusAmount = (value) => {
return value * Purchase.#BONUS_FACTOR
}

static updateBonusBalance = (
email,
price,
bonusUse = 0,
) => {
const amount = this.calcBonusAmount(price) //Purchase.calcBonusAmount(price)
const currentBalance = Purchase.getBonusBalance(email)
const updateBalance = currentBalance + amount - bonusUse
Purchase.#bonusAccount.set(email, updateBalance)

// console.log(email, updateBalance)

return amount
}

constructor(data, product) {
this.id = ++Purchase.#count
this.firstname = data.firstname
this.lastname = data.lastname
this.phone = data.phone
this.email = data.email
this.comment = data.comment || null
this.bonus = data.bonus || 0
this.promocode = data.promocode || null
this.totalPrice = data.totalPrice
this.productPrice = data.productPrice
this.deliveryPrice = data.deliveryPrice
this.amount = data.amount
this.product = product
}

static add = (...arg) => {
const newPurchase = new Purchase(...arg)
this.#list.push(newPurchase)
return newPurchase
}

static getList = () => {
// return Purchase.#list.reverse()
return Purchase.#list.reverse().map((item) => ({
id: item.id,
totalPrice: item.totalPrice,
bonus: item.bonus,
product: item.product.title,
}))
}

static getById = (id) => {
return Purchase.#list.find((item) => item.id === id)
}

static updateById = (id, data) => {
const purchase = Purchase.getById(id)
if (purchase) {
if (data.firstname)
purchase.firstname = data.firstname
if (data.lastname) purchase.lastname = data.lastname
if (data.phone) purchase.phone = data.phone
if (data.email) purchase.email = data.email
return true
} else {
return false
}
}
}

class Promocode {
static #list = []

constructor(name, factor) {
this.name = name
this.factor = factor
}

static add = (name, factor) => {
const newPromoCode = new Promocode(name, factor)
Promocode.#list.push(newPromoCode)
return newPromoCode
}

static getByName = (name) => {
return this.#list.find((promo) => promo.name === name)
}

static calc = (promo, price) => {
return price * promo.factor
}
}

Promocode.add('SUMMER2023', 0.9)
Promocode.add('DISCOUNT50', 0.5)
Promocode.add('SALE25', 0.75)

router.get('/', function (req, res) {
// res.render генерує нам HTML сторінку

// ↙️ cюди вводимо назву файлу з сontainer
res.render('purchase-index', {
// вказуємо назву папки контейнера, в якій знаходяться наші стилі
style: 'purchase-index',

data: { list: Product.getList() },
})
// ↑↑ сюди вводимо JSON дані
})

// ================================================================

router.get('/purchase-product', function (req, res) {
const id = Number(req.query.id)

// ↙️ cюди вводимо назву файлу з сontainer
res.render('purchase-product', {
// вказуємо назву папки контейнера, в якій знаходяться наші стилі
style: 'purchase-product',

data: {
list: Product.getRandomList(id),
product: Product.getById(id),
},
})
// ↑↑ сюди вводимо JSON дані
})

// ================================================================

router.post('/purchase-create', function (req, res) {
const id = Number(req.query.id)
const amount = Number(req.body.amount)

if (amount < 1) { return res.render('alert', { style: 'alert' , data: { message: 'Помилка' ,
  info: 'Некоректна кількість товару' , link: `/purchase-product?id=${id}`, }, }) } const product=Product.getById(id) if
  (product.amount < 1) { return res.render('alert', { style: 'alert' , data: { message: 'Помилка' ,
  info: 'Такої кількості товару немає в наявності' , link: `/purchase-product?id=${id}`, }, }) } const
  productPrice=product.price * amount const totalPrice=productPrice + Purchase.DELIVERY_PRICE const
  bonus=Purchase.calcBonusAmount(totalPrice) // console.log('bonus000:', bonus) res.render('purchase-create', {
  style: 'purchase-create' , data: { id: product.id, cart: [ { text: `${product.title} (${amount} шт)`, price:
  productPrice, }, { text: 'Доставка' , price: Purchase.DELIVERY_PRICE, }, ], totalPrice, productPrice, deliveryPrice:
  Purchase.DELIVERY_PRICE, amount, bonus, }, }) // ↑↑ сюди вводимо JSON дані })
  //================================================================router.post('/purchase-submit', function (req, res)
  { const id=Number(req.query.id) let { totalPrice, productPrice, deliveryPrice, amount, firstname, lastname, phone,
  email, comment, promocode, bonus, }=req.body // console.log('bonus1:', bonus) // let correctBonus=bonus[1] //
  console.log('newBonus:', correctBonus) // bonus=correctBonus // console.log('bonus2:', bonus) const
  product=Product.getById(id) if (!product) { return res.render('alert', { style: 'alert' , data: { message: 'Помилка' ,
  info: 'Товар не знайдено' , link: '/purchase-list' , }, }) } if (product.amount < amount) { return res.render('alert',
  { style: 'alert' , data: { message: 'Помилка' , info: 'Товару немає в потрібній кількості' , link: '/purchase-list' ,
  }, }) } totalPrice=Number(totalPrice) productPrice=Number(productPrice) deliveryPrice=Number(deliveryPrice)
  amount=Number(amount) bonus=Number(bonus) // console.log('bonus3:', bonus) if ( isNaN(totalPrice) ||
  isNaN(productPrice) || isNaN(deliveryPrice) || isNaN(amount) || isNaN(bonus) ) { // console.log('bonusNaN', bonus)
  return res.render('alert', { style: 'alert' , data: { message: 'Помилка' , info: 'Некоректні дані' ,
  link: '/purchase-list' , }, }) } if (!firstname || !lastname || !phone || !email) { return res.render('alert', {
  style: 'alert' , data: { message: "Заповніть обов'язкові поля, позначені *" , info: 'Некоректні дані' , link:
  `/purchase-product?id=${id}`, }, }) } // console.log('bonus4:', bonus) if (bonus || bonus> 0) {
  const bonusAmount = Purchase.getBonusBalance(email)

  // console.log('bonusAmount', bonusAmount)

  if (bonus > bonusAmount) {
  bonus = bonusAmount //====
  // console.log('bonus5:', bonus)
  }
  Purchase.updateBonusBalance(email, totalPrice, bonus)
  totalPrice -= bonus
  } else {
  Purchase.updateBonusBalance(email, totalPrice, 0)
  }

  if (promocode) {
  promocode = Promocode.getByName(promocode)
  if (promocode) {
  totalPrice = Promocode.calc(promocode, totalPrice)
  }
  }

  if (totalPrice < 0) totalPrice=0 // console.log('bonus3', bonus) const purchase=Purchase.add( { firstname, lastname,
    phone, email, comment, promocode, totalPrice, productPrice, deliveryPrice, amount, bonus, }, product, )
    console.log(purchase) // ↙ cюди вводимо назву файлу з сontainer res.render('alert', { // вказуємо назву папки
    контейнера, в якій знаходяться наші стилі style: 'alert' , data: { message: 'Успішно' , info: 'Замовлення створено'
    , link: `/purchase-list`, }, }) // ↑↑ сюди вводимо JSON дані })
    //================================================================router.get('/purchase-list', function (req, res) {
    const list=Purchase.getList() // console.log(list) res.render('purchase-list', { style: 'purchase-list' , list, })
    // ↑↑ сюди вводимо JSON дані })
    //================================================================router.get('/purchase-info', function (req, res) {
    const id=Number(req.query.id) const purchaseInfo=Purchase.getById(id) // console.log(purchaseInfo)
    res.render('purchase-info', { style: 'purchase-info' , purchaseInfo, }) // ↑↑ сюди вводимо JSON дані })
    //================================================================router.get('/purchase-update', function (req, res)
    { const id=Number(req.query.id) const purchase=Purchase.getById(id) if (!purchase) { res.render('alert', {
    style: 'alert' , data: { message: 'Помилка' , info: 'Замовлення з таким ID відсутньо' , link: '/purchase-list' , },
    }) } else { res.render('purchase-update', { style: 'purchase-update' , data: { id: purchase.id, firstname:
    purchase.firstname, lastname: purchase.lastname, phone: purchase.phone, email: purchase.email, }, }) } // ↑↑ сюди
    вводимо JSON дані })
    //===============================================================router.post('/purchase-update', function (req, res)
    { const id=Number(req.query.id) let { firstname, lastname, phone, email }=req.body const
    purchase=Purchase.getById(id) // console.log(purchase) if (purchase) { const newPurchase=Purchase.updateById(id, {
    firstname, lastname, phone, email, }) if (newPurchase) { res.render('alert', { style: 'alert' , data: {
    message: 'Успішне виконання дії' , info: 'Інформацію про замовлення оновлено' , link:
    `/purchase-info?id=${purchase.id}`, }, }) } else { res.render('alert', { style: 'alert' , data: { message: 'Помилка'
    , info: 'Інформацію про замовлення не оновлено' , link: `/purchase-info?id=${purchase.id}`, }, }) } } else {
    res.render('alert', { style: 'alert' , data: { message: 'Помилка' , info: 'Дане замовлення відсутньо' ,
    link: '/purchase-list' , }, }) } }) --}}